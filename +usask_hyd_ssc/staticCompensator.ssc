component staticCompensator
    % Compensator
    %
    % Compensator with no dynamics. All flows are assumed to be turbulent.
    % No flow into x or y ports
    
    nodes
        PA = foundation.hydraulic.hydraulic; % A:left
        PB = foundation.hydraulic.hydraulic; % B:right
        X = foundation.hydraulic.hydraulic; % X:left
        Y = foundation.hydraulic.hydraulic; % Y:right
    end
    inputs
        
    end
    variables
        q = {1, 'm^3/s'};     % Volumetric flow rate
        dP_AB = {0, 'Pa'};        % Pressure A wrt B
        % dP_YX = {0, 'Pa'};        % Pressure Y wrt X
        Pw = {0, 'W'};        % Power Loss
        Area = {0, 'm^2'};         % Orifice Area
    end
    parameters
        
        
        
        A1 = {20e-6 , 'm^2'}; % A1 Orifice Area For Small X-Y pressure
        P1 = {1e6 , 'Pa'}; % P1=X-Y Pressure for Above Area
        A2 = {1e-9 , 'm^2'}; % A2 Orifice Area For Large X-Y Pressure
        P2 = {1.1e6, 'Pa'}; % P2=X-Y Pressure for Above Area
        Cd     = 0.61;   % Discharge Coefficient
    end
    
    parameters ( Access = private )
        density =   { 860   , 'kg/m^3' }; % Fluid density
        K = {0, 'm^2/Pa'}; % Area-pressure slope
    end
    
    function setup
    through(q, PA.q, PB.q); % Through variable q from A to B
    across(dP_AB, PA.p, PB.p);  % Across variable p from A to B
    if Cd <= 0
        pm_error('simscape:GreaterThanZero','Discharge Coefficient')
    end
    if A1 <= 0
        pm_error('simscape:GreaterThanZero','Orifice Area')
    end
    if A2 <= 0
        pm_error('simscape:GreaterThanZero','Orifice Area')
    end
    if P2 <= P1
        error('P2 must be greater than P1')
    end
    density = PA.density;
    K=(A2-A1)/(P2-P1);
    end
    
    equations
        
        let
            dP_YX = X.p-Y.p;
            %Area= if dP_YX<P1, A1 elseif dP_YX>P2, A2 else A1+(dP_YX-P1)*K end;
            
        in
            if dP_YX<P1
                Area == A1;
            elseif dP_YX>P2
                Area == A2;
            else
                Area == A1+(dP_YX-P1)*K
            end
            if gt(q,0)
                dP_AB == density/(2*Cd^2*Area^2)*q^2;
            else
                dP_AB == -density/(2*Cd^2*Area^2)*q^2;
            end
            
            Pw == dP_AB*q;
        end
    end
end
